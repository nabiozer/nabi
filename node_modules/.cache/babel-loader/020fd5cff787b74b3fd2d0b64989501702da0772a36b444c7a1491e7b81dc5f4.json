{"ast":null,"code":"import iziToast from \"izitoast\";\nconst renderIcon = messageType => {\n  switch (messageType) {\n    case \"success\":\n      return \"fa fa-check\";\n    case \"error\":\n      return \"fa fa-exclamation-circle\";\n    case \"info\":\n      return \"fa fa-info-check\";\n    case \"warning\":\n      return \"fa fa-exclamation-triangle\";\n    default:\n      return null;\n  }\n};\nconst toastMessage = messageOptions => {\n  const messageDefault = {\n    theme: \"dark\",\n    icon: renderIcon(messageOptions.messageType),\n    iconColor: 'white',\n    title: '',\n    titleColor: 'white',\n    titleSize: '',\n    titleLineHeight: '',\n    message: '',\n    messageColor: '',\n    messageLineHeight: '',\n    messageSize: '',\n    backgroundColor: '',\n    position: 'bottomLeft',\n    progressBar: false,\n    progressColor: 'rgb(229,61,65)',\n    close: true,\n    timeout: 3000,\n    overlay: false,\n    overlayClose: true,\n    displayMode: 1,\n    target: null,\n    zindex: 99999,\n    maxWidth: 600,\n    messageType: 'show',\n    transitionIn: 'fadeIn',\n    layout: 2\n  };\n  return new Promise(resolve => {\n    const iziMessage = {\n      ...messageDefault,\n      ...messageOptions\n    };\n    switch (iziMessage.messageType) {\n      case \"show\":\n        iziToast.show(iziMessage);\n        break;\n      case \"info\":\n        iziToast.info(iziMessage);\n        break;\n      case \"success\":\n        iziToast.success(iziMessage);\n        break;\n      case \"warning\":\n        iziToast.warning(iziMessage);\n        break;\n      case \"error\":\n        iziToast.error(iziMessage);\n        break;\n      default:\n        iziToast.success(iziMessage);\n    }\n  });\n};\nexport default toastMessage;","map":{"version":3,"names":["iziToast","renderIcon","messageType","toastMessage","messageOptions","messageDefault","theme","icon","iconColor","title","titleColor","titleSize","titleLineHeight","message","messageColor","messageLineHeight","messageSize","backgroundColor","position","progressBar","progressColor","close","timeout","overlay","overlayClose","displayMode","target","zindex","maxWidth","transitionIn","layout","Promise","resolve","iziMessage","show","info","success","warning","error"],"sources":["/Users/nabiozer/Desktop/nabi/src/_components/Display/Notification/toastMessage.ts"],"sourcesContent":["import iziToast from \"izitoast\";\nimport { IMessage } from \"./type\";\n\nconst renderIcon = (messageType: string | undefined) => {\n  switch (messageType) {\n    case \"success\":\n      return \"fa fa-check\";\n    case \"error\":\n      return \"fa fa-exclamation-circle\";\n    case \"info\":\n      return \"fa fa-info-check\";\n    case \"warning\":\n      return \"fa fa-exclamation-triangle\";\n    default:\n        return null; \n  }\n};\n\nconst toastMessage = (messageOptions:IMessage):Promise<{confirm:boolean}> => {\n    const messageDefault:IMessage = {\n        theme: \"dark\",\n        icon: renderIcon(messageOptions.messageType),\n        iconColor:'white',\n        title:'',\n        titleColor:'white',\n        titleSize:'',\n        titleLineHeight:'',\n        message: '',\n        messageColor:'',\n        messageLineHeight: '',\n        messageSize: '',\n        backgroundColor:'',\n        position:'bottomLeft',\n        progressBar:false,\n        progressColor: 'rgb(229,61,65)',\n        close:true,\n        timeout:3000,\n        overlay:false,\n        overlayClose:true, \n        displayMode:1,\n        target:null,\n        zindex:99999,\n        maxWidth:600,\n        messageType:'show',\n        transitionIn:'fadeIn',\n        layout:2,\n    }\n\n    return new Promise((resolve) => {\n      const iziMessage:any = {\n        ...messageDefault,\n        ...messageOptions,\n      };\n\n      switch (iziMessage.messageType) {\n        case \"show\":\n          iziToast.show(iziMessage);\n          break \n        case \"info\":\n          iziToast.info(iziMessage);\n          break \n        case \"success\":\n          iziToast.success(iziMessage);\n          break \n        case \"warning\":\n          iziToast.warning(iziMessage);\n          break \n          case \"error\":\n            iziToast.error(iziMessage);\n            break \n        default:\n            iziToast.success(iziMessage)\n      }\n    })\n\n    \n}\n\n\nexport default toastMessage;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,UAAU;AAG/B,MAAMC,UAAU,GAAIC,WAA+B,IAAK;EACtD,QAAQA,WAAW;IACjB,KAAK,SAAS;MACZ,OAAO,aAAa;IACtB,KAAK,OAAO;MACV,OAAO,0BAA0B;IACnC,KAAK,MAAM;MACT,OAAO,kBAAkB;IAC3B,KAAK,SAAS;MACZ,OAAO,4BAA4B;IACrC;MACI,OAAO,IAAI;EAAC;AAEpB,CAAC;AAED,MAAMC,YAAY,GAAIC,cAAuB,IAAgC;EACzE,MAAMC,cAAuB,GAAG;IAC5BC,KAAK,EAAE,MAAM;IACbC,IAAI,EAAEN,UAAU,CAACG,cAAc,CAACF,WAAW,CAAC;IAC5CM,SAAS,EAAC,OAAO;IACjBC,KAAK,EAAC,EAAE;IACRC,UAAU,EAAC,OAAO;IAClBC,SAAS,EAAC,EAAE;IACZC,eAAe,EAAC,EAAE;IAClBC,OAAO,EAAE,EAAE;IACXC,YAAY,EAAC,EAAE;IACfC,iBAAiB,EAAE,EAAE;IACrBC,WAAW,EAAE,EAAE;IACfC,eAAe,EAAC,EAAE;IAClBC,QAAQ,EAAC,YAAY;IACrBC,WAAW,EAAC,KAAK;IACjBC,aAAa,EAAE,gBAAgB;IAC/BC,KAAK,EAAC,IAAI;IACVC,OAAO,EAAC,IAAI;IACZC,OAAO,EAAC,KAAK;IACbC,YAAY,EAAC,IAAI;IACjBC,WAAW,EAAC,CAAC;IACbC,MAAM,EAAC,IAAI;IACXC,MAAM,EAAC,KAAK;IACZC,QAAQ,EAAC,GAAG;IACZ1B,WAAW,EAAC,MAAM;IAClB2B,YAAY,EAAC,QAAQ;IACrBC,MAAM,EAAC;EACX,CAAC;EAED,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;IAC9B,MAAMC,UAAc,GAAG;MACrB,GAAG5B,cAAc;MACjB,GAAGD;IACL,CAAC;IAED,QAAQ6B,UAAU,CAAC/B,WAAW;MAC5B,KAAK,MAAM;QACTF,QAAQ,CAACkC,IAAI,CAACD,UAAU,CAAC;QACzB;MACF,KAAK,MAAM;QACTjC,QAAQ,CAACmC,IAAI,CAACF,UAAU,CAAC;QACzB;MACF,KAAK,SAAS;QACZjC,QAAQ,CAACoC,OAAO,CAACH,UAAU,CAAC;QAC5B;MACF,KAAK,SAAS;QACZjC,QAAQ,CAACqC,OAAO,CAACJ,UAAU,CAAC;QAC5B;MACA,KAAK,OAAO;QACVjC,QAAQ,CAACsC,KAAK,CAACL,UAAU,CAAC;QAC1B;MACJ;QACIjC,QAAQ,CAACoC,OAAO,CAACH,UAAU,CAAC;IAAA;EAEpC,CAAC,CAAC;AAGN,CAAC;AAGD,eAAe9B,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}